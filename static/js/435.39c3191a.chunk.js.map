{"version":3,"file":"static/js/435.39c3191a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","store/Contacts/selectors.js","store/Filter/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  width: 300px;\n`;\n\nexport const StyledInput = styled.input`\n  margin-bottom: 5px;\n  border-radius: 10px;\n  border-color: black;\n  padding-left: 20px;\n  height: 20px;\n  &::placeholder {\n    font-size: 12px;\n    color: black;\n  }\n`;\n\nexport const StyledBtn = styled.button`\n  border-radius: 10px;\n  background: rgb(20% 10% 50%);\n  color: white;\n  height: 25px;\n  border: none;\n  &:hover,\n  :focus {\n    color: black;\n    background-color: yellow;\n  }\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { StyledBtn, StyledForm, StyledInput } from './ContactForm.styled';\nimport { addContacts } from 'store/API';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newObj = {\n      id: nanoid(),\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n    dispatch(addContacts(newObj));\n\n    e.target.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <StyledInput type=\"text\" name=\"name\" placeholder=\"Name\" required />\n      <StyledInput type=\"tel\" name=\"number\" placeholder=\"Number\" required />\n      <StyledBtn type=\"submit\">Add Contacts</StyledBtn>\n    </StyledForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled('li')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nexport const BtnDelete = styled('button')`\n  background: rgb(20% 10% 50%);\n  border-radius: 10px;\n  border: rgb(255 122 127 / 0.2);\n  box-shadow: 1px 1px #e96874;\n  color: white;\n  height: 30px;\n  &:hover,\n  :focus {\n    color: black;\n    background-color: yellow;\n  }\n`;\n\nexport const StylePar = styled('p')`\n  width: 200px;\n  height: 25px;\n  border-radius: 10px;\n  color: white;\n  text-align: center;\n  margin: auto;\n  background-color: rgb(30% 10% 50%);\n`;\n\nexport const StyledUl = styled.ul`\n  margin: auto;\n  max-width: 600px;\n  margin-top: 20px;\n  padding-bottom: 40px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'store/Filter/selectors';\n\n// Імпортуємо необхідні функції для створення селектора та вибору фільтру зі стану.\n\nexport const selectLoading = state => state.contacts.isLoading;\n// Селектор selectLoading вибирає прапор isLoading зі стану contacts.\n\nexport const selectError = state => state.contacts.error;\n// Селектор selectError вибирає об'єкт помилки (якщо він є) зі стану contacts.\n\nexport const selectContacts = state => state.contacts.items;\n// Селектор selectContacts вибирає масив контактів зі стану contacts.\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n// Створюємо складний селектор selectVisibleContacts, який залежить від selectContacts та selectFilter.\n// Використовуючи createSelectors, ми передаємо попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів.\n// В результаті, selectVisibleContacts повертає масив контактів, які відповідають заданому фільтру.\n// Фільтрація виконується шляхом порівняння імен контактів зі значенням фільтру, без урахування регістру.\n","export const selectFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { BtnDelete, Item, StylePar, StyledUl } from './ContactList.styled';\nimport { deleteContacts } from 'store/API';\nimport { selectVisibleContacts } from 'store/Contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  return (\n    <div>\n      <StyledUl>\n        {contacts.map(contact => (\n          <Item key={contact.id}>\n            <StylePar>{contact.name}</StylePar>\n            <StylePar>{contact.number}</StylePar>\n            <BtnDelete onClick={() => dispatch(deleteContacts(contact.id))}>\n              Delete\n            </BtnDelete>\n          </Item>\n        ))}\n      </StyledUl>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'store/API';\nimport { selectIsLoading } from 'store/auth/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); // Виконуємо запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <ContactForm /> {/* Компонент форми для додавання контакту */}\n      <div>{isLoading && <Loader />}</div>{' '}\n      {/* Відображення повідомлення про виконання запиту */}\n      <ContactList /> {/* Компонент для відображення списку контактів */}\n    </>\n  );\n}\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledBtn","_templateObject3","ContactForm","dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","newObj","id","nanoid","name","target","elements","value","number","addContacts","reset","children","_jsx","type","placeholder","required","Item","BtnDelete","StylePar","StyledUl","_templateObject4","selectVisibleContacts","createSelector","state","contacts","items","filter","contact","toLowerCase","includes","ContactList","useSelector","map","onClick","deleteContacts","Tasks","isLoading","selectIsLoading","useEffect","fetchContacts","_Fragment","Loader"],"sourceRoot":""}